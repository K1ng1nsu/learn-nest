  - TypeORM 사용  => RDBMS & NOSQL

## TypeORM
  - npm install @nestjs/typeorm typeorm 
# TypeORM with splite
  - npm install @nestjs/typeorm typeorm sqlite3

## TypeORM
  - 메인 모듈(AppModule)/기본모듈 imports 추가가  TypeOrmModule.forRoot({
      type: 'sqlite', // db종류
      database: 'db.sqlite',  // database이름
      entities: [], // 엔티티 추가해줘야함
      synchronize: true, // true면 등록한 엔티티에 따라 테이블과 열을 생성 수정 삭제함, 
  })
  - Entity 만들면 repository 저절로 만들어줌
  - 


### Entity 만들기
  - ex) /users/user.entity.ts
  - 엔티티 파일 만들고 클래스 모든 속성 적기
  - 부모모듈(UserModule)과 연결 => imports: [TypeOrmModule.forFeature([User])] =>  리포지터리 생김(파일이 만들어지지는 않음)
  - (메인/최상위)모듈(AppModule)과 연결 forRoot 부분에 entities추가

### TypeORM Decorator
# @Entity()
# @PrimaryGeneratedColumn()
# @Column()



### Repository 사용

## Repository 주입
@Injectable()
export class UsersService {
  constructor(@InjectRepository(User) private userRepo: Repository<User>) {

  }
}


### TypeORM Hook

## TypeORM Hook 이 작동하기 위한 조건(전부 만족해야함)
  1. 훅을 작동하는 메소드여야함 
  2. 엔티티를 이용해서 작업을 해야함 #####

## TypeORM Method with Hook ## hook 작동
# 삽입 관련 C
  - save()
# 업데이트 관련 U
  - save(), softRemove() => 삭제관련 아님 deletedAt 필드를 업데이트하기 때문에
# 삭제 관련 D
  - remove()
# 조회 관련 R 
  - find(), findOne(), findOneBy()


## TypeORM Method with NO Hook ## NO HOOK
# 삽입 관련 C
  - insert()
# 업데이트 관련 U
  - update() , softDelete() => 삭제관련 아님 deletedAt 필드를 업데이트하기 때문에
# 삭제 관련 D
  - delete()


## TypeORM Hook 종류

# 삽입 관련 C         => save()
    - @BeforeInsert 
    - @AfterInsert 
# 업데이트 관련 U     => save(),  softRemove() => 삭제관련 아님 deletedAt 필드를 업데이트하기 때문에 훅이 실행됩니다.
    - @BeforeUpdate
    - @AfterUpdate
# 삭제 관련 D        => remove()
    - @BeforeRemove
    - @AfterRemove
# 조회 관련 R        => find(), findOne(), findOneBy()
    - @AfterLoad

